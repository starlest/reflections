What happens when you initialize a repository?

A new git repository is created. A hidden folder named .git is added which contains the required files for version history.

Why do you need to do it?


Without a repository, git cannot do anything. Git only tracks files in the repository.

How is the staging area different from the working directory and the repository?

Staging area is the intermediary link between working directory and the repository. It contains the files that are selected to be commited to the repository.
The files are not yet in the repository so addition or removal of files from the staging area can still be made (before commit).

What value do you think it offers?

The option to create your set of files which you want to commit without having to add all new files. 
This way you have the option to make a split based on logical functionality

How can you use the staging area to make sure you have one commit per logical 
change?

The staging area gives you the possibility to decide which files should be part of the commit and which not.
This way you can split changed files in logical change sets.

What are some situations when branches would be helpful in keeping your history
organized? 

    Work on conflicting changes, trying out new features, large code refactoring etc.
    This gives the possibility to change everything with multiple commits into the "feature branch" and then do a large merge to the "main branch".
    This will keep the history clean, but you can still use version control during development.

How would branches help?


Split concerns. Safe to make big changes and test new things out.

How do the diagrams help you visualize the branch structure?



What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?
